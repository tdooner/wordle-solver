#!/usr/bin/env ruby
require_relative '../wordle_interview_q.rb'

STRATEGIES = [
  WordleInterviewQ::SolverStrategy::Random,
  WordleInterviewQ::SolverStrategy::MostLikelyCharacters,
  WordleInterviewQ::SolverStrategy::GoForTheGreen,
]


def play
  strategy_class = nil

  loop do
    puts "Pick an auto-guess strategy:"
    STRATEGIES.each_with_index do |strategy, i|
      puts "#{i + 1}: #{strategy}"
    end
    strategy_class = STRATEGIES[$stdin.gets.to_i - 1]
    break if strategy_class
  end

  game = WordleInterviewQ::Game.new
  puts "THE WORD IS #{game.instance_variable_get(:@word)}"
  solver = WordleInterviewQ::Solver.new(game, strategy_class)
  clue = "_____"
  loop do
    $stdout.write "Current state: #{clue}\n"
    $stdout.write "      Guess? : "
    guess = $stdin.gets.strip.upcase
    if guess == ''
      guess, clue = solver.make_guess
      $stdout.write "   Auto-guess: #{guess}\n"
    else
      clue = game.guess(guess)
      solver.receive_clue(guess, clue)
    end

    break if clue == 'GOT IT'
  end

  puts 'You got it!'
end

def solve
  attempts = 300

  STRATEGIES.each do |strategy_class|
    statistics = { fails: 0, strategy_time: 0 }
    puts "Playing #{attempts} games with #{strategy_class}..."

    attempts.times do
      guesses = 0
      game = WordleInterviewQ::Game.new
      solver = WordleInterviewQ::Solver.new(game, strategy_class)

      loop do
        guesses += 1
        start_time = Time.now
        guess, clue = solver.make_guess
        solver.receive_clue(guess, clue)
        statistics[:strategy_time] += Time.now - start_time
        if clue == 'GOT IT'
          statistics[guesses] ||= 0
          statistics[guesses] += 1
          break
        elsif guesses == 6
          statistics[:fails] ||= 0
          statistics[:fails] += 1
          break
        end
      end
    end

    fails = statistics.delete(:fails)
    strategy_time = statistics.delete(:strategy_time)
    puts "Failure rate: #{(100.0 * fails.to_f / attempts).round}% / Strategy time: #{(1000 * strategy_time / attempts).round(1)} ms / attempt"
    (1..6).each do |num|
      pct = statistics.fetch(num, 0).to_f / attempts
      puts "#{num}: #{'â–†' * (40 * pct).floor}#{' ' * (40 * (1 - pct)).ceil} (#{(100 * pct).floor.to_s.rjust(2)}%)"
    end
  end
end

operation = ARGV.shift&.downcase
case operation
when 'play'
  play
when 'solve'
  solve
else
  puts "Usage: #{$0} [play|solve]"
  exit 1
end
